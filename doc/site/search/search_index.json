{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Brumba Brumba is a Web applications builder using:. - Node.js and MongoDb on server. - Bulma UI, and Inferno on client. - ESM modules on both sides. Licensed under the MIT license. The goal is to encapsulate the most of the difficulties of the chain browser/communication/nodejs/mongodb and let you concentrate on: design your forms/pages/reports with facilitated approach simplified query syntax implicit retrieve/search/save/delete operations form specific events and CSS server scripts very simple database API The application is saved entirely in a database with the same name. Take a look at this minimal DEMO application . Login: Application: brdemo Database: brdb User: demo Password: demodemo Then open the IDE and see it's structure. A brief IDE howto.html in the doc folder and online here . More detailed documentation in the doc folder and online here . Installation node.js (min ver.13) and mongodb (ver.4) must be installed and running download brumba git clone https://github.com/danparn/brumba.git move to brumba directory install dependences: npm install generate SSL key and auto certificate: openssl genrsa -out brumba.key 2048 openssl req -new -key brumba.key -out brumba.csr openssl x509 -req -in brumba.csr -signkey brumba.key -out brumba.cert start the server: node server webserverport mongohost:mongoport the short command node server will default to: node server 3000 localhost:27017 create application and database: node new app yourapp node new db yourdb open Brunba IDE https://localhost:3000/ide and login: Application: yourapp User: admin Password: brumba create forms/pages/reports/menu open application https://localhost:3000 and login: Application: yourapp Database: yourab User: admin Password: brumba create users and permissions remember to change admin's default password enjoy to manage application's users (for IDE access) login as: Application: yourapp Database: yourapp Support Brumba Google Group - For support and suggestions","title":"Overview"},{"location":"#welcome-to-brumba","text":"Brumba is a Web applications builder using:. - Node.js and MongoDb on server. - Bulma UI, and Inferno on client. - ESM modules on both sides. Licensed under the MIT license. The goal is to encapsulate the most of the difficulties of the chain browser/communication/nodejs/mongodb and let you concentrate on: design your forms/pages/reports with facilitated approach simplified query syntax implicit retrieve/search/save/delete operations form specific events and CSS server scripts very simple database API The application is saved entirely in a database with the same name. Take a look at this minimal DEMO application . Login: Application: brdemo Database: brdb User: demo Password: demodemo Then open the IDE and see it's structure. A brief IDE howto.html in the doc folder and online here . More detailed documentation in the doc folder and online here .","title":"Welcome to Brumba"},{"location":"#installation","text":"node.js (min ver.13) and mongodb (ver.4) must be installed and running download brumba git clone https://github.com/danparn/brumba.git move to brumba directory install dependences: npm install generate SSL key and auto certificate: openssl genrsa -out brumba.key 2048 openssl req -new -key brumba.key -out brumba.csr openssl x509 -req -in brumba.csr -signkey brumba.key -out brumba.cert start the server: node server webserverport mongohost:mongoport the short command node server will default to: node server 3000 localhost:27017 create application and database: node new app yourapp node new db yourdb open Brunba IDE https://localhost:3000/ide and login: Application: yourapp User: admin Password: brumba create forms/pages/reports/menu open application https://localhost:3000 and login: Application: yourapp Database: yourab User: admin Password: brumba create users and permissions remember to change admin's default password enjoy to manage application's users (for IDE access) login as: Application: yourapp Database: yourapp","title":"Installation"},{"location":"#support","text":"Brumba Google Group - For support and suggestions","title":"Support"},{"location":"reference/common/","text":"Members dateFormat Date format, default 'dd/mm/yyyy'. Constants err Error codes. hex24 hex24 regular expresion, used for for mongodb ObjectId() check. Functions timezone() \u21d2 number Timezone. Based on the system timezone. strCap(str) \u21d2 string Capitalize string strSplit(str, sep) \u21d2 Array.<string> Split string by separator, trim spaces and eliminates empty items strGetBet(str, from, to, startIndex, include) \u21d2 string Get substring between delimiters. strFindAny(str, pat, startIndex) \u21d2 number Find any of chars in pattern. objEmpty(obj) \u21d2 boolean Is empty object? objPick(obj, props) \u21d2 object Pick a selection of properties. objLess(obj, props) \u21d2 object Pick all properties less then props list, recursively. objDel(obj, props) Delete properties of object. ATTENTION it will modify the original object. objClone(obj) \u21d2 object Object clone toJSON(str) \u21d2 json Parse string to JSON. More forgiving then the JSON.parse() dateFormat Date format, default 'dd/mm/yyyy'. err Error codes. Example export const err = { db: -1, // database not found/opened coll: -2, // collection not found unique: -3, // not unique field count: -4, // count error cursor: -5, // cursor error ins: -6, // insert error upd: -7, // update error del: -8, // delete error file: -9, // file error dupl: -10, // duplicate record param: -11, // wrong parameters data: -12, // wrong data gen: -13, // generic srv: -14, // server script: -15, // script not found user: -16, // user not authenticated trig: -17, // trigger error sock: -18 // socket error } hex24 hex24 regular expresion, used for for mongodb ObjectId() check. timezone() \u21d2 number Timezone. Based on the system timezone. Returns : number - +-milliseconds strCap(str) \u21d2 string Capitalize string Returns : string - string Param Type str string strSplit(str, sep) \u21d2 Array.<string> Split string by separator, trim spaces and eliminates empty items Returns : Array.<string> - string array Param Type str string sep string strGetBet(str, from, to, startIndex, include) \u21d2 string Get substring between delimiters. Returns : string - string Param Type Description str string from string from delimiter to string to delimiter startIndex number index to start, default 0 include boolean if delimiters must be included in the return slice, default false strFindAny(str, pat, startIndex) \u21d2 number Find any of chars in pattern. Returns : number - Index of the first char found, -1 if non. Param Type Description str string pat string pattern of chars startIndex number index to start, default 0 objEmpty(obj) \u21d2 boolean Is empty object? Returns : boolean - bool Param Type obj object objPick(obj, props) \u21d2 object Pick a selection of properties. Returns : object - New object containing only selected properties. Param Type Description obj object props string comma separated property names objLess(obj, props) \u21d2 object Pick all properties less then props list, recursively. Returns : object - New object containing non excluded properties. Param Type Description obj object props string comma separated property names objDel(obj, props) Delete properties of object. ATTENTION it will modify the original object. Param Type Description obj object props string comma separated property names objClone(obj) \u21d2 object Object clone Returns : object - New object, clone of the original. Param Type obj object toJSON(str) \u21d2 json Parse string to JSON. More forgiving then the JSON.parse() Returns : json - json Param Type str string","title":"Common"},{"location":"reference/common/#members","text":"dateFormat Date format, default 'dd/mm/yyyy'.","title":"Members"},{"location":"reference/common/#constants","text":"err Error codes. hex24 hex24 regular expresion, used for for mongodb ObjectId() check.","title":"Constants"},{"location":"reference/common/#functions","text":"timezone() \u21d2 number Timezone. Based on the system timezone. strCap(str) \u21d2 string Capitalize string strSplit(str, sep) \u21d2 Array.<string> Split string by separator, trim spaces and eliminates empty items strGetBet(str, from, to, startIndex, include) \u21d2 string Get substring between delimiters. strFindAny(str, pat, startIndex) \u21d2 number Find any of chars in pattern. objEmpty(obj) \u21d2 boolean Is empty object? objPick(obj, props) \u21d2 object Pick a selection of properties. objLess(obj, props) \u21d2 object Pick all properties less then props list, recursively. objDel(obj, props) Delete properties of object. ATTENTION it will modify the original object. objClone(obj) \u21d2 object Object clone toJSON(str) \u21d2 json Parse string to JSON. More forgiving then the JSON.parse()","title":"Functions"},{"location":"reference/common/#dateformat","text":"Date format, default 'dd/mm/yyyy'.","title":"dateFormat"},{"location":"reference/common/#err","text":"Error codes. Example export const err = { db: -1, // database not found/opened coll: -2, // collection not found unique: -3, // not unique field count: -4, // count error cursor: -5, // cursor error ins: -6, // insert error upd: -7, // update error del: -8, // delete error file: -9, // file error dupl: -10, // duplicate record param: -11, // wrong parameters data: -12, // wrong data gen: -13, // generic srv: -14, // server script: -15, // script not found user: -16, // user not authenticated trig: -17, // trigger error sock: -18 // socket error }","title":"err"},{"location":"reference/common/#hex24","text":"hex24 regular expresion, used for for mongodb ObjectId() check.","title":"hex24"},{"location":"reference/common/#timezone-number","text":"Timezone. Based on the system timezone. Returns : number - +-milliseconds","title":"timezone() \u21d2 number"},{"location":"reference/common/#strcapstr-string","text":"Capitalize string Returns : string - string Param Type str string","title":"strCap(str) \u21d2 string"},{"location":"reference/common/#strsplitstr-sep-arraystring","text":"Split string by separator, trim spaces and eliminates empty items Returns : Array.<string> - string array Param Type str string sep string","title":"strSplit(str, sep) \u21d2 Array.&lt;string&gt;"},{"location":"reference/common/#strgetbetstr-from-to-startindex-include-string","text":"Get substring between delimiters. Returns : string - string Param Type Description str string from string from delimiter to string to delimiter startIndex number index to start, default 0 include boolean if delimiters must be included in the return slice, default false","title":"strGetBet(str, from, to, startIndex, include) \u21d2 string"},{"location":"reference/common/#strfindanystr-pat-startindex-number","text":"Find any of chars in pattern. Returns : number - Index of the first char found, -1 if non. Param Type Description str string pat string pattern of chars startIndex number index to start, default 0","title":"strFindAny(str, pat, startIndex) \u21d2 number"},{"location":"reference/common/#objemptyobj-boolean","text":"Is empty object? Returns : boolean - bool Param Type obj object","title":"objEmpty(obj) \u21d2 boolean"},{"location":"reference/common/#objpickobj-props-object","text":"Pick a selection of properties. Returns : object - New object containing only selected properties. Param Type Description obj object props string comma separated property names","title":"objPick(obj, props) \u21d2 object"},{"location":"reference/common/#objlessobj-props-object","text":"Pick all properties less then props list, recursively. Returns : object - New object containing non excluded properties. Param Type Description obj object props string comma separated property names","title":"objLess(obj, props) \u21d2 object"},{"location":"reference/common/#objdelobj-props","text":"Delete properties of object. ATTENTION it will modify the original object. Param Type Description obj object props string comma separated property names","title":"objDel(obj, props)"},{"location":"reference/common/#objcloneobj-object","text":"Object clone Returns : object - New object, clone of the original. Param Type obj object","title":"objClone(obj) \u21d2 object"},{"location":"reference/common/#tojsonstr-json","text":"Parse string to JSON. More forgiving then the JSON.parse() Returns : json - json Param Type str string","title":"toJSON(str) \u21d2 json"},{"location":"reference/components/","text":"Functions confirmModal(message, okHandler, color) Opens a modal dialog asking for confirmation. notification(message) Displays a notification. confirmModal(message, okHandler, color) Opens a modal dialog asking for confirmation. Param Type Description message string message to be displayed okHandler function ok button handler color string ok button color, default 'is-primary' notification(message) Displays a notification. Param Type Description message string message to be displayed","title":"Components"},{"location":"reference/components/#functions","text":"confirmModal(message, okHandler, color) Opens a modal dialog asking for confirmation. notification(message) Displays a notification.","title":"Functions"},{"location":"reference/components/#confirmmodalmessage-okhandler-color","text":"Opens a modal dialog asking for confirmation. Param Type Description message string message to be displayed okHandler function ok button handler color string ok button color, default 'is-primary'","title":"confirmModal(message, okHandler, color)"},{"location":"reference/components/#notificationmessage","text":"Displays a notification. Param Type Description message string message to be displayed","title":"notification(message)"},{"location":"reference/form/","text":"Functions formRetrieve(form, id) Form: retrieve, then update. formUpdate(formE, data) Form: data update formInput(form, fields, required) \u21d2 object | null Form input. Collect input data. formSave(formE) Form save. Save modified data formRetrieve(form, id) Form: retrieve, then update. Param Type Description form object form object id string document id formUpdate(formE, data) Form: data update Param Type formE element data json formInput(form, fields, required) \u21d2 object | null Form input. Collect input data. Returns : object | null - collected data, null if errors Param Type Description form object | string form or formName fields string comma separated fields list required boolean required fields formSave(formE) Form save. Save modified data Param Type formE element","title":"Form"},{"location":"reference/form/#functions","text":"formRetrieve(form, id) Form: retrieve, then update. formUpdate(formE, data) Form: data update formInput(form, fields, required) \u21d2 object | null Form input. Collect input data. formSave(formE) Form save. Save modified data","title":"Functions"},{"location":"reference/form/#formretrieveform-id","text":"Form: retrieve, then update. Param Type Description form object form object id string document id","title":"formRetrieve(form, id)"},{"location":"reference/form/#formupdateforme-data","text":"Form: data update Param Type formE element data json","title":"formUpdate(formE, data)"},{"location":"reference/form/#forminputform-fields-required-object-null","text":"Form input. Collect input data. Returns : object | null - collected data, null if errors Param Type Description form object | string form or formName fields string comma separated fields list required boolean required fields","title":"formInput(form, fields, required) \u21d2 object | null"},{"location":"reference/form/#formsaveforme","text":"Form save. Save modified data Param Type formE element","title":"formSave(formE)"},{"location":"reference/forms/","text":"findForm(arg) \u21d2 object Find form Form = { name: 'fname', query: {coll: 'cname', fields: 'fld1,fld2', where: {}, sort: {field:1}}, list: string, fields: [{ name: string, type: string, newval: val },...] data: {}, modified: false } Returns : object - form Param Type arg string | object","title":"Forms"},{"location":"reference/forms/#findformarg-object","text":"Find form Form = { name: 'fname', query: {coll: 'cname', fields: 'fld1,fld2', where: {}, sort: {field:1}}, list: string, fields: [{ name: string, type: string, newval: val },...] data: {}, modified: false } Returns : object - form Param Type arg string | object","title":"findForm(arg) \u21d2 object"},{"location":"reference/grid/","text":"gridRender(formE, data, args) \u21d2 object Grid render Returns : object - grid object Param Type Description formE object | string form element with data-grid attribut data json grid data args object arguments","title":"Grid"},{"location":"reference/grid/#gridrenderforme-data-args-object","text":"Grid render Returns : object - grid object Param Type Description formE object | string form element with data-grid attribut data json grid data args object arguments","title":"gridRender(formE, data, args) \u21d2 object"},{"location":"reference/util/","text":"Members br Brumba globals Constants $ Alias of document.querySelector $$ Alias of document.querySelectorAll Functions e$(elem, sel) \u21d2 element DOM element.querySelector syntax sugar e$$(elem, sel) \u21d2 NodeList DOM element.querySelectorAll syntax sugar n$$(names) \u21d2 NodeList Name selector syntax sugar remote(par, data, type) \u21d2 Promise.<json> Remote. Fetch anvelope. childIndex(elem) \u21d2 number Child index in the children list createElement(str) \u21d2 element Create DOM element from string HTML syntax validate(fields) \u21d2 boolean | element Validate inputs. report(formName, reportName, args) Report call. All form inputs are passed as arguments. inputDate(str) \u21d2 string Input date. Converst input to 'yyyy-mm-dd' string. Separators accepted: . / - clientScript(scriptName, cb) Client script. Dynamic import of a server saved module. translate(str, lang) \u21d2 string Translate string to lang br Brumba globals Example br = { app: 'applicationName', db: 'databaseName', usercode: '5f33f94ce1e692204f4d1697', ws: DOM element, // workspace container link (root element) dlg: DOM element // dialogs container link } $ Alias of document.querySelector Example import { $ } from '/lib/util.js' const frm = $('form') $$ Alias of document.querySelectorAll Example import { $$ } from '/lib/util.js' const forms = $$('form') e$(elem, sel) \u21d2 element DOM element.querySelector syntax sugar Param Type Description elem element element to search on sel string selector e$$(elem, sel) \u21d2 NodeList DOM element.querySelectorAll syntax sugar Param Type Description elem element element to search on sel string selector n$$(names) \u21d2 NodeList Name selector syntax sugar Param Type Description names string Coma separated names list Example n$$('foo,bar') is an abbreviation of document.querySelectorAll('[name=foo],[name=bar]') remote(par, data, type) \u21d2 Promise.<json> Remote. Fetch anvelope. Returns : Promise.<json> - promise Param Type Description par object query parameters data json data to send on server; only for POST type string data type, default 'application/json' Example Query parameters: par = { cmd: default 'GET' if coll, 'SRV' if script, 'REP' if report, 'POST' for data save, 'DEL' for delete app: 'applicationName', default br.app (from login) db: 'databaseName', default br.db (from login) coll: 'collectionName' script: 'scriptName.function', exludes coll fields: 'fld1,fld2,...', returns only this fields; only with coll concat: 'fieldName', returns only this embedded array field, merging all selected documents; only with coll; excludes fields add: 'fld1,fld2,...', adds fields to concat result; only with concat where: {_id: '...'}, query selector, optional sort: {fld1: 1, fld2: -1}, sort documents, 1 ascendin, -1 descending, optional args: {...}, more arguments if neaded, optional result: 'count', returns only the documents count, optional findOne: true, returns only one document, optional usercode: default br.usercode (from login) } Example import { remote } from '/lib/util.js' remote({coll: 'Patients', fields: 'firs_name,last_name', where:{active: true}, sort:{last_name: 1}) .then(res => { console.log(res) }) .catch(console.log) async function scr() { const data = await remote({script: 'demoSrv.formData'}).catch(console.log) console.log(data) } childIndex(elem) \u21d2 number Child index in the children list Returns : number - index Param Type Description elem element child element createElement(str) \u21d2 element Create DOM element from string HTML syntax Returns : element - element Param Type Description str string html syntax validate(fields) \u21d2 boolean | element Validate inputs. Returns : boolean | element - true/element If fields parameter undefined, all fields of the form are validated. All specified fields are considered required, some has type check. Returns the non valid element, or true if all valid. Param Type Description fields string comma separated fields list report(formName, reportName, args) Report call. All form inputs are passed as arguments. Param Type Description formName string reportName string args object more arguments inputDate(str) \u21d2 string Input date. Converst input to 'yyyy-mm-dd' string. Separators accepted: . / - Returns : string - string Param Type Description str string imput string Example '1.1.17' will be converted to '2017-01-01' '1.1' will be converted to 'currentYear-01-01' '1' will be converted to 'currentYear-currentMonth-01' clientScript(scriptName, cb) Client script. Dynamic import of a server saved module. Param Type scriptName string cb callback Example Dynamic import of a server saved module. It's methods canot be imported as usual, but called by module.method() import { clientScript } from '/lib/util.js' clientScript('scriptName', mod => { mod.methodName() ... }) translate(str, lang) \u21d2 string Translate string to lang Returns : string - string Param Type str string lang json","title":"Util"},{"location":"reference/util/#members","text":"br Brumba globals","title":"Members"},{"location":"reference/util/#constants","text":"$ Alias of document.querySelector $$ Alias of document.querySelectorAll","title":"Constants"},{"location":"reference/util/#functions","text":"e$(elem, sel) \u21d2 element DOM element.querySelector syntax sugar e$$(elem, sel) \u21d2 NodeList DOM element.querySelectorAll syntax sugar n$$(names) \u21d2 NodeList Name selector syntax sugar remote(par, data, type) \u21d2 Promise.<json> Remote. Fetch anvelope. childIndex(elem) \u21d2 number Child index in the children list createElement(str) \u21d2 element Create DOM element from string HTML syntax validate(fields) \u21d2 boolean | element Validate inputs. report(formName, reportName, args) Report call. All form inputs are passed as arguments. inputDate(str) \u21d2 string Input date. Converst input to 'yyyy-mm-dd' string. Separators accepted: . / - clientScript(scriptName, cb) Client script. Dynamic import of a server saved module. translate(str, lang) \u21d2 string Translate string to lang","title":"Functions"},{"location":"reference/util/#br","text":"Brumba globals Example br = { app: 'applicationName', db: 'databaseName', usercode: '5f33f94ce1e692204f4d1697', ws: DOM element, // workspace container link (root element) dlg: DOM element // dialogs container link }","title":"br"},{"location":"reference/util/#_1","text":"Alias of document.querySelector Example import { $ } from '/lib/util.js' const frm = $('form')","title":"$"},{"location":"reference/util/#_2","text":"Alias of document.querySelectorAll Example import { $$ } from '/lib/util.js' const forms = $$('form')","title":"$$"},{"location":"reference/util/#eelem-sel-element","text":"DOM element.querySelector syntax sugar Param Type Description elem element element to search on sel string selector","title":"e$(elem, sel) \u21d2 element"},{"location":"reference/util/#eelem-sel-nodelist","text":"DOM element.querySelectorAll syntax sugar Param Type Description elem element element to search on sel string selector","title":"e$$(elem, sel) \u21d2 NodeList"},{"location":"reference/util/#nnames-nodelist","text":"Name selector syntax sugar Param Type Description names string Coma separated names list Example n$$('foo,bar') is an abbreviation of document.querySelectorAll('[name=foo],[name=bar]')","title":"n$$(names) \u21d2 NodeList"},{"location":"reference/util/#remotepar-data-type-promisejson","text":"Remote. Fetch anvelope. Returns : Promise.<json> - promise Param Type Description par object query parameters data json data to send on server; only for POST type string data type, default 'application/json' Example Query parameters: par = { cmd: default 'GET' if coll, 'SRV' if script, 'REP' if report, 'POST' for data save, 'DEL' for delete app: 'applicationName', default br.app (from login) db: 'databaseName', default br.db (from login) coll: 'collectionName' script: 'scriptName.function', exludes coll fields: 'fld1,fld2,...', returns only this fields; only with coll concat: 'fieldName', returns only this embedded array field, merging all selected documents; only with coll; excludes fields add: 'fld1,fld2,...', adds fields to concat result; only with concat where: {_id: '...'}, query selector, optional sort: {fld1: 1, fld2: -1}, sort documents, 1 ascendin, -1 descending, optional args: {...}, more arguments if neaded, optional result: 'count', returns only the documents count, optional findOne: true, returns only one document, optional usercode: default br.usercode (from login) } Example import { remote } from '/lib/util.js' remote({coll: 'Patients', fields: 'firs_name,last_name', where:{active: true}, sort:{last_name: 1}) .then(res => { console.log(res) }) .catch(console.log) async function scr() { const data = await remote({script: 'demoSrv.formData'}).catch(console.log) console.log(data) }","title":"remote(par, data, type) \u21d2 Promise.&lt;json&gt;"},{"location":"reference/util/#childindexelem-number","text":"Child index in the children list Returns : number - index Param Type Description elem element child element","title":"childIndex(elem) \u21d2 number"},{"location":"reference/util/#createelementstr-element","text":"Create DOM element from string HTML syntax Returns : element - element Param Type Description str string html syntax","title":"createElement(str) \u21d2 element"},{"location":"reference/util/#validatefields-boolean-element","text":"Validate inputs. Returns : boolean | element - true/element If fields parameter undefined, all fields of the form are validated. All specified fields are considered required, some has type check. Returns the non valid element, or true if all valid. Param Type Description fields string comma separated fields list","title":"validate(fields) \u21d2 boolean | element"},{"location":"reference/util/#reportformname-reportname-args","text":"Report call. All form inputs are passed as arguments. Param Type Description formName string reportName string args object more arguments","title":"report(formName, reportName, args)"},{"location":"reference/util/#inputdatestr-string","text":"Input date. Converst input to 'yyyy-mm-dd' string. Separators accepted: . / - Returns : string - string Param Type Description str string imput string Example '1.1.17' will be converted to '2017-01-01' '1.1' will be converted to 'currentYear-01-01' '1' will be converted to 'currentYear-currentMonth-01'","title":"inputDate(str) \u21d2 string"},{"location":"reference/util/#clientscriptscriptname-cb","text":"Client script. Dynamic import of a server saved module. Param Type scriptName string cb callback Example Dynamic import of a server saved module. It's methods canot be imported as usual, but called by module.method() import { clientScript } from '/lib/util.js' clientScript('scriptName', mod => { mod.methodName() ... })","title":"clientScript(scriptName, cb)"},{"location":"reference/util/#translatestr-lang-string","text":"Translate string to lang Returns : string - string Param Type str string lang json","title":"translate(str, lang) \u21d2 string"},{"location":"tutorials/form/","text":"Form 1. New form 1.1 Enter IDE from https://localhost:3090/ide 1.2 Open TOOLS menu and write down a comma separated list of fields like: first_name, last_name, pid, gender, birth_day, address, zip, city, county, country, email, mobile, social_status, photo, id_file, active then click new Form . The new created form will look like this: 1.3 This form needs a documents list for navigation, so click on the list toolbar button to set it. Only a left side empty space could be observed here. 1.4 Click properties toolbar button to open the properties popup window. Be sure to be on the FORM tagName, and fill in query field with: { coll: 'patients', fields: 'first_name,last_name', sort: {last_name: 1, first_name: 1} } and list field with: last_name+first_name as name 1.5 Change the proposed form name (current datetime) in the toolbar name input, with the proper name Patients. Now it will look like this: 1.6 Click the save toolbar button, or the usual CTRL+S keyboard shortcut. The new created form will be present in the FORMS menu for further use. It is not finished, but it's already functional, and can be used to input data. Just add a menu item (MENU section): \"Patients\" forms.Patients under Setup with a leading tab, and save. Pay attention tab indentation is important in menu definition. It will look like this: 1.7 Now you can open the application from https://localhost:3090 open Setup/Patients menu and start inserting the first patients (just the name for now). As soon as you save the firs record, it will appear in the list on the left. Insert 2-3 more names to have a navigable list, and click on list items to see the record content in the form. This is an infinite scroll-able list . The list can be filtered by using the two search toolbar buttons, but more on this later. 2. Form layout A new form has four containers, divided in 2 columns and 2 row. The first row is intended as header and is empty by default. Use it for title or other header elements. Initially all fields are inserted in the left column. If you don't need a double column form, the right column will rest empty, for layout purpose only. Use CTRL+B or toolbar borders button to toggle containers border, witch are purely informative, and are not saved. Container management: add new column: from peer container context menu Add column add row: from parent container context menu Add row resize width: select container, then SHIFT+arrow left/righ t; last column not resizable delete: select container, then CTRL+DEL Field management: add one: from container context menu Add label/button/field/image add multiple: select a container, open TOOLS menu and write down a comma separated list of fields, then click add Fields menu move to other container: drag and drop over the empty space of the new container move in bottom of the same container: drag and drop over the bottom empty space move over other field: drag and drop over the other field; it will finish right aside resize: select label/input, then SHIFT+arrow left/right delete: select label/input, then CTRL+DEL Now lets reface our form: 2.1 Move photo and id_file fields to the right column, by dragging them one by one. 2.2 Drag city over zip, then county over zip. 2.3 Select City and County labels, then delete them by CTRL+DEL. 2.4 Open Properties, select label Zip and change it to Zip/City/Cnty. 2.5 Close properties. Select left container and enlarge it by SHIFT+arrow right like this: 2.6 Play with the width of zip, city and county to finish like this: 2.7 Add a title label: left click the upper left container and Add field . Change the label text to Patient and the size to large. Delete the input. It is better to add a field , not a simple label, because it will keep fields alignment. 2.8 Save the form. 3. Field types 3.1 Open Properties popup and move it in a convenient place. 3.2 Select gender and change it's type from text to radio. Select the first radio and change it's text from Label to M. Select the second radio and change it's text from Label to F. 3.3 Select fields and change their type: birth_day => date email => email active => checkbox photo => image id_file => file 3.4 Save form. Now you can return to the application and complete patients profile with proper data. How to use image and file types in application: photo field: use right click to upload an image, then save; use left click for full size view id_file field: use right click to upload file, then save; use left click to view 4. Form CSS 4.1 Select the title label in Properties and set it's for property to title . 4.2 Open CSS editor from css toolbar button and write down: [for=title] { color: green; } 4.3 Click apply on the editor to see the change. Save form. 5. Form events The code in the events will be executed immediately after the form load. All javascript events can be used, and Brumba specific events are added. 5.1 How to import: import { $, $$, e$, br, remote, createElement, report } from '/lib/util.js' import { notification, confirmModal } from '/lib/components.js' import { gridRender } from '/lib/grid.js' import { findForm } from '/lib/forms.js' 5.2 Form events defined and triggered by Brumba: retrieve - after data retrieve, before updating form; can block update - after form has updated/rendered it's data save - before saving data; can block delete - before deleting the current record; can block An event handler can block normal operation by using preventDefault(). import { $ } from '/lib/util.js' $('form').addEventListener('delete', e => { if (...) { e.preventDefault() } }) 6. Form HTML The html toolbar button opens the html editor of the form. It is useful for adding elements that IDE is not covering, or simply modify on the fly, if you know what you are doing. It is a very powerful tool that opens all the html capabilities, but even a dangerous one, because IDE could not be able to recover from some mistakes. So use it carefully, and make a copy before modifying. It is also useful for copying forms from one application to another. To make a local copy instead, use the Copy context menu and a clone of the form will be created with the _COPY suffix name.","title":"Form"},{"location":"tutorials/form/#form","text":"","title":"Form"},{"location":"tutorials/form/#1-new-form","text":"1.1 Enter IDE from https://localhost:3090/ide 1.2 Open TOOLS menu and write down a comma separated list of fields like: first_name, last_name, pid, gender, birth_day, address, zip, city, county, country, email, mobile, social_status, photo, id_file, active then click new Form . The new created form will look like this: 1.3 This form needs a documents list for navigation, so click on the list toolbar button to set it. Only a left side empty space could be observed here. 1.4 Click properties toolbar button to open the properties popup window. Be sure to be on the FORM tagName, and fill in query field with: { coll: 'patients', fields: 'first_name,last_name', sort: {last_name: 1, first_name: 1} } and list field with: last_name+first_name as name 1.5 Change the proposed form name (current datetime) in the toolbar name input, with the proper name Patients. Now it will look like this: 1.6 Click the save toolbar button, or the usual CTRL+S keyboard shortcut. The new created form will be present in the FORMS menu for further use. It is not finished, but it's already functional, and can be used to input data. Just add a menu item (MENU section): \"Patients\" forms.Patients under Setup with a leading tab, and save. Pay attention tab indentation is important in menu definition. It will look like this: 1.7 Now you can open the application from https://localhost:3090 open Setup/Patients menu and start inserting the first patients (just the name for now). As soon as you save the firs record, it will appear in the list on the left. Insert 2-3 more names to have a navigable list, and click on list items to see the record content in the form. This is an infinite scroll-able list . The list can be filtered by using the two search toolbar buttons, but more on this later.","title":"1. New form"},{"location":"tutorials/form/#2-form-layout","text":"A new form has four containers, divided in 2 columns and 2 row. The first row is intended as header and is empty by default. Use it for title or other header elements. Initially all fields are inserted in the left column. If you don't need a double column form, the right column will rest empty, for layout purpose only. Use CTRL+B or toolbar borders button to toggle containers border, witch are purely informative, and are not saved. Container management: add new column: from peer container context menu Add column add row: from parent container context menu Add row resize width: select container, then SHIFT+arrow left/righ t; last column not resizable delete: select container, then CTRL+DEL Field management: add one: from container context menu Add label/button/field/image add multiple: select a container, open TOOLS menu and write down a comma separated list of fields, then click add Fields menu move to other container: drag and drop over the empty space of the new container move in bottom of the same container: drag and drop over the bottom empty space move over other field: drag and drop over the other field; it will finish right aside resize: select label/input, then SHIFT+arrow left/right delete: select label/input, then CTRL+DEL Now lets reface our form: 2.1 Move photo and id_file fields to the right column, by dragging them one by one. 2.2 Drag city over zip, then county over zip. 2.3 Select City and County labels, then delete them by CTRL+DEL. 2.4 Open Properties, select label Zip and change it to Zip/City/Cnty. 2.5 Close properties. Select left container and enlarge it by SHIFT+arrow right like this: 2.6 Play with the width of zip, city and county to finish like this: 2.7 Add a title label: left click the upper left container and Add field . Change the label text to Patient and the size to large. Delete the input. It is better to add a field , not a simple label, because it will keep fields alignment. 2.8 Save the form.","title":"2. Form layout"},{"location":"tutorials/form/#3-field-types","text":"3.1 Open Properties popup and move it in a convenient place. 3.2 Select gender and change it's type from text to radio. Select the first radio and change it's text from Label to M. Select the second radio and change it's text from Label to F. 3.3 Select fields and change their type: birth_day => date email => email active => checkbox photo => image id_file => file 3.4 Save form. Now you can return to the application and complete patients profile with proper data. How to use image and file types in application: photo field: use right click to upload an image, then save; use left click for full size view id_file field: use right click to upload file, then save; use left click to view","title":"3. Field types"},{"location":"tutorials/form/#4-form-css","text":"4.1 Select the title label in Properties and set it's for property to title . 4.2 Open CSS editor from css toolbar button and write down: [for=title] { color: green; } 4.3 Click apply on the editor to see the change. Save form.","title":"4. Form CSS"},{"location":"tutorials/form/#5-form-events","text":"The code in the events will be executed immediately after the form load. All javascript events can be used, and Brumba specific events are added. 5.1 How to import: import { $, $$, e$, br, remote, createElement, report } from '/lib/util.js' import { notification, confirmModal } from '/lib/components.js' import { gridRender } from '/lib/grid.js' import { findForm } from '/lib/forms.js' 5.2 Form events defined and triggered by Brumba: retrieve - after data retrieve, before updating form; can block update - after form has updated/rendered it's data save - before saving data; can block delete - before deleting the current record; can block An event handler can block normal operation by using preventDefault(). import { $ } from '/lib/util.js' $('form').addEventListener('delete', e => { if (...) { e.preventDefault() } })","title":"5. Form events"},{"location":"tutorials/form/#6-form-html","text":"The html toolbar button opens the html editor of the form. It is useful for adding elements that IDE is not covering, or simply modify on the fly, if you know what you are doing. It is a very powerful tool that opens all the html capabilities, but even a dangerous one, because IDE could not be able to recover from some mistakes. So use it carefully, and make a copy before modifying. It is also useful for copying forms from one application to another. To make a local copy instead, use the Copy context menu and a clone of the form will be created with the _COPY suffix name.","title":"6. Form HTML"}]}